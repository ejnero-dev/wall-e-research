#!/usr/bin/env python3
"""
üí∞ DEMO: An√°lisis de Precios Competitivos Wall-E
Demuestra las capacidades de an√°lisis de mercado y pricing strategy
"""
import logging
import os
import sys
from datetime import datetime
from dataclasses import dataclass
from typing import List
import statistics

# A√±adir el directorio padre al path para importar m√≥dulos src
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

@dataclass
class PriceData:
    """Datos de precio de un producto"""
    platform: str
    title: str
    price: float
    condition: str
    shipping_included: bool
    location: str
    url: str
    date_scraped: datetime
    seller_rating: float = None
    sold: bool = False

def analyze_iphone_market():
    """An√°lisis completo del mercado iPhone 12"""
    logger.info("üí∞ === DEMO: AN√ÅLISIS DE PRECIOS COMPETITIVOS ===")
    
    # Datos reales simulados del mercado
    market_data = [
        PriceData("wallapop", "iPhone 12 128GB Negro", 380, "usado", True, "Barcelona", "", datetime.now(), 4.2),
        PriceData("wallapop", "iPhone 12 128GB Negro", 420, "como nuevo", True, "Madrid", "", datetime.now(), 4.8),
        PriceData("wallapop", "iPhone 12 128GB Negro", 450, "nuevo", True, "Valencia", "", datetime.now(), 4.9),
        PriceData("wallapop", "iPhone 12 128GB Azul", 400, "buen estado", False, "Sevilla", "", datetime.now(), 4.5),
        PriceData("wallapop", "iPhone 12 128GB Blanco", 390, "usado", True, "Bilbao", "", datetime.now(), 4.1),
        PriceData("amazon", "iPhone 12 128GB", 529, "nuevo", True, "Online", "", datetime.now(), 4.7),
        PriceData("wallapop", "iPhone 12 128GB Verde", 410, "como nuevo", False, "Granada", "", datetime.now(), 4.6),
        PriceData("wallapop", "iPhone 12 128GB Negro", 370, "usado", True, "M√°laga", "", datetime.now(), 4.0),
    ]
    
    # Tu producto
    your_product = {
        "name": "iPhone 12 128GB Negro",
        "price": 420.0,
        "condition": "como nuevo",
        "location": "Madrid"
    }
    
    # An√°lisis estad√≠stico
    wallapop_prices = [p.price for p in market_data if p.platform == "wallapop"]
    all_prices = [p.price for p in market_data]
    
    avg_price = statistics.mean(wallapop_prices)
    median_price = statistics.median(wallapop_prices)
    min_price = min(wallapop_prices)
    max_price = max(wallapop_prices)
    
    logger.info(f"üìä AN√ÅLISIS DE MERCADO - {your_product['name']}")
    logger.info(f"   üìà Precio promedio Wallapop: {avg_price:.2f}‚Ç¨")
    logger.info(f"   üìä Precio mediano: {median_price:.2f}‚Ç¨")
    logger.info(f"   üìâ Rango de precios: {min_price}‚Ç¨ - {max_price}‚Ç¨")
    logger.info(f"   üî¢ Total anuncios analizados: {len(wallapop_prices)}")
    
    # An√°lisis por estado
    condition_prices = {}
    for p in market_data:
        if p.platform == "wallapop":
            if p.condition not in condition_prices:
                condition_prices[p.condition] = []
            condition_prices[p.condition].append(p.price)
    
    logger.info(f"\nüìã PRECIOS POR ESTADO:")
    for condition, prices in condition_prices.items():
        avg_condition = statistics.mean(prices) if prices else 0
        logger.info(f"   {condition.upper()}: {avg_condition:.2f}‚Ç¨ (promedio de {len(prices)} anuncios)")
    
    # Estrategias de pricing
    competitive_price = avg_price * 0.95  # 5% below average
    premium_price = avg_price * 1.05     # 5% above average
    quick_sale_price = avg_price * 0.90   # 10% below average
    
    logger.info(f"\nüí° ESTRATEGIAS RECOMENDADAS:")
    logger.info(f"   üèÉ Venta r√°pida (10% descuento): {quick_sale_price:.2f}‚Ç¨")
    logger.info(f"   ‚öñÔ∏è Precio competitivo (5% descuento): {competitive_price:.2f}‚Ç¨")
    logger.info(f"   üí∞ Maximizar ganancia (5% premium): {premium_price:.2f}‚Ç¨")
    
    # Evaluaci√≥n de tu precio
    your_price = your_product['price']
    logger.info(f"\nüéØ EVALUACI√ìN DE TU PRECIO ({your_price}‚Ç¨):")
    
    if your_price < competitive_price:
        logger.info(f"   ‚úÖ EXCELENTE - Tu precio es muy competitivo")
        logger.info(f"   üìà Posibilidad alta de venta r√°pida")
    elif your_price <= premium_price:
        logger.info(f"   ‚öñÔ∏è BUENO - Tu precio est√° en rango √≥ptimo")
        logger.info(f"   üìä Precio balanceado entre competitividad y ganancia")
    else:
        logger.info(f"   ‚ö†Ô∏è ALTO - Tu precio est√° por encima del mercado")
        logger.info(f"   üìâ Considera bajar para mejorar competitividad")
    
    # Comparaci√≥n con tu condici√≥n espec√≠fica
    same_condition_prices = condition_prices.get(your_product['condition'], [])
    if same_condition_prices:
        avg_same_condition = statistics.mean(same_condition_prices)
        logger.info(f"\nüîç COMPARACI√ìN ESPEC√çFICA ({your_product['condition'].upper()}):")
        logger.info(f"   üìä Promedio misma condici√≥n: {avg_same_condition:.2f}‚Ç¨")
        if your_price <= avg_same_condition:
            logger.info(f"   ‚úÖ Tu precio est√° bien posicionado para tu condici√≥n")
        else:
            logger.info(f"   ‚ö†Ô∏è Tu precio es alto comparado con misma condici√≥n")
    
    # Tendencia de mercado simulada
    logger.info(f"\nüìà TENDENCIA DE MERCADO:")
    logger.info(f"   üìä iPhone 12 128GB: ESTABLE")
    logger.info(f"   üí° Demanda: ALTA (producto popular)")
    logger.info(f"   ‚è∞ Mejor momento venta: FINES DE SEMANA")
    logger.info(f"   üìç Tu ubicaci√≥n (Madrid): VENTAJA (mercado grande)")
    
    return True

if __name__ == "__main__":
    success = analyze_iphone_market()
    if success:
        print("\nüéØ SUCCESS: An√°lisis de precios completado!")
    else:
        print("\n‚ùå ERROR: Fall√≥ el an√°lisis de precios")