# price_integration.py
"""
Integraci√≥n del Sistema de An√°lisis de Precios con el Bot Principal
Ejemplo de c√≥mo usar el an√°lisis de precios en el flujo del bot
"""

import asyncio
from typing import Dict, Optional
from datetime import datetime
import logging

from price_analyzer import PriceAnalyzer
from conversation_engine.engine import ConversationEngine

logger = logging.getLogger(__name__)


class PriceAwareBot:
    """Bot con capacidad de an√°lisis de precios integrada"""

    def __init__(self):
        self.price_analyzer = PriceAnalyzer()
        self.conversation_engine = ConversationEngine()
        self.product_prices = {}  # Cache de precios analizados

    async def handle_new_product(self, product: Dict) -> Dict:
        """Maneja un nuevo producto y sugiere precio √≥ptimo"""

        logger.info(f"Analizando precio para: {product['title']}")

        # Analizar precio del mercado
        analysis = await self.price_analyzer.analyze_product_price(
            product_name=product["title"],
            product_condition=product["condition"],
            location=product.get("location", "Espa√±a"),
        )

        # Determinar estrategia de precio
        pricing_strategy = self._determine_pricing_strategy(product, analysis)

        # Guardar en cache
        self.product_prices[product["id"]] = {
            "analysis": analysis,
            "strategy": pricing_strategy,
            "timestamp": datetime.now(),
        }

        return pricing_strategy

    def _determine_pricing_strategy(self, product: Dict, analysis: Dict) -> Dict:
        """Determina la estrategia de precio √≥ptima"""

        # Si el usuario tiene prisa por vender
        if product.get("urgent_sale", False):
            return {
                "recommended_price": analysis.competitive_price,
                "strategy": "competitive",
                "reason": "Venta urgente - precio competitivo para venta r√°pida",
                "expected_days": "1-3 d√≠as",
            }

        # Si es un producto de alta demanda
        if analysis.market_trend == "subiendo":
            return {
                "recommended_price": analysis.premium_price,
                "strategy": "premium",
                "reason": "Alta demanda - puedes pedir precio premium",
                "expected_days": "7-14 d√≠as",
            }

        # Estrategia por defecto: equilibrada
        return {
            "recommended_price": analysis.suggested_price,
            "strategy": "balanced",
            "reason": "Precio equilibrado para venta en tiempo razonable",
            "expected_days": "5-7 d√≠as",
        }

    async def handle_price_negotiation(
        self, product_id: str, offered_price: float, buyer_profile: Dict
    ) -> str:
        """Maneja negociaciones de precio con compradores"""

        if product_id not in self.product_prices:
            return "Lo siento, necesito verificar el precio del mercado primero."

        price_data = self.product_prices[product_id]
        analysis = price_data["analysis"]

        # Calcular margen de negociaci√≥n
        min_acceptable = analysis.competitive_price * 0.95  # 5% menos que competitivo

        if offered_price >= analysis.suggested_price:
            return "¬°Perfecto! Acepto tu oferta. ¬øCu√°ndo podemos quedar?"

        elif offered_price >= min_acceptable:
            # Considerar perfil del comprador
            if buyer_profile["valoraciones"] > 20 and buyer_profile["compras"] > 5:
                return f"Me gustar√≠a {analysis.suggested_price}‚Ç¨, pero por tus buenas valoraciones te lo dejo en {offered_price}‚Ç¨"
            else:
                return f"Mi √∫ltimo precio ser√≠a {analysis.suggested_price * 0.97:.0f}‚Ç¨, no puedo bajar m√°s"

        else:
            return f"Lo siento, es muy poco. El precio m√≠nimo ser√≠a {min_acceptable:.0f}‚Ç¨ y ya es una ganga"

    async def monitor_market_changes(self, check_interval_hours: int = 24):
        """Monitorea cambios en el mercado y ajusta precios"""

        while True:
            for product_id, price_data in self.product_prices.items():
                try:
                    # Re-analizar si han pasado m√°s de X horas
                    hours_passed = (
                        datetime.now() - price_data["timestamp"]
                    ).total_seconds() / 3600

                    if hours_passed > check_interval_hours:
                        logger.info(f"Re-analizando precio para producto {product_id}")

                        # Obtener datos del producto (desde DB en producci√≥n)
                        product = await self._get_product_data(product_id)

                        # Nuevo an√°lisis
                        new_analysis = await self.price_analyzer.analyze_product_price(
                            product_name=product["title"],
                            product_condition=product["condition"],
                        )

                        # Comparar con an√°lisis anterior
                        old_price = price_data["analysis"].suggested_price
                        new_price = new_analysis.suggested_price

                        price_change = ((new_price - old_price) / old_price) * 100

                        if abs(price_change) > 5:  # Cambio significativo
                            await self._notify_price_change(
                                product_id, old_price, new_price, price_change
                            )

                            # Actualizar cache
                            self.product_prices[product_id]["analysis"] = new_analysis
                            self.product_prices[product_id][
                                "timestamp"
                            ] = datetime.now()

                except Exception as e:
                    logger.error(f"Error monitoreando producto {product_id}: {e}")

            await asyncio.sleep(check_interval_hours * 3600)

    async def suggest_price_for_quick_sale(self, product_id: str) -> Dict:
        """Sugiere precio para venta r√°pida cuando hay muchos mensajes"""

        if product_id not in self.product_prices:
            return {"error": "Producto no analizado"}

        analysis = self.product_prices[product_id]["analysis"]

        # Estrategias progresivas seg√∫n tiempo sin vender
        suggestions = [
            {
                "days": 7,
                "discount": 0.05,
                "price": analysis.suggested_price * 0.95,
                "message": "Baja un 5% para aumentar inter√©s",
            },
            {
                "days": 14,
                "discount": 0.10,
                "price": analysis.suggested_price * 0.90,
                "message": "Precio competitivo para venta r√°pida",
            },
            {
                "days": 21,
                "discount": 0.15,
                "price": analysis.competitive_price,
                "message": "Precio m√≠nimo recomendado del mercado",
            },
        ]

        return suggestions

    async def _get_product_data(self, product_id: str) -> Dict:
        """Obtiene datos del producto (desde DB en producci√≥n)"""
        # Simulado - en producci√≥n vendr√≠a de la base de datos
        return {
            "id": product_id,
            "title": "iPhone 12 128GB",
            "condition": "buen estado",
            "location": "Madrid",
        }

    async def _notify_price_change(
        self, product_id: str, old_price: float, new_price: float, change_percent: float
    ):
        """Notifica cambios significativos de precio"""

        if change_percent > 0:
            message = f"üìà El precio de mercado ha subido un {change_percent:.1f}%"
            recommendation = "Considera subir tu precio"
        else:
            message = f"üìâ El precio de mercado ha bajado un {abs(change_percent):.1f}%"
            recommendation = "Considera bajar tu precio para mantener competitividad"

        logger.info(f"{message}. {recommendation}")

        # Aqu√≠ se enviar√≠a notificaci√≥n al usuario
        # await send_notification(user_id, message, recommendation)


# Ejemplo de uso
async def example_usage():
    """Ejemplo de c√≥mo usar el bot con an√°lisis de precios"""

    bot = PriceAwareBot()

    # Nuevo producto
    product = {
        "id": "prod123",
        "title": "iPhone 12 Pro 256GB",
        "condition": "como nuevo",
        "location": "Barcelona",
        "urgent_sale": False,
    }

    # Analizar y obtener estrategia de precio
    strategy = await bot.handle_new_product(product)
    print(f"Precio recomendado: {strategy['recommended_price']}‚Ç¨")
    print(f"Estrategia: {strategy['strategy']}")
    print(f"Raz√≥n: {strategy['reason']}")

    # Simular negociaci√≥n
    response = await bot.handle_price_negotiation(
        "prod123", 550.0, {"valoraciones": 25, "compras": 10}
    )
    print(f"Respuesta a negociaci√≥n: {response}")

    # Sugerencias para venta r√°pida
    suggestions = await bot.suggest_price_for_quick_sale("prod123")
    for sugg in suggestions:
        print(
            f"Despu√©s de {sugg['days']} d√≠as: {sugg['price']:.2f}‚Ç¨ - {sugg['message']}"
        )


if __name__ == "__main__":
    asyncio.run(example_usage())
