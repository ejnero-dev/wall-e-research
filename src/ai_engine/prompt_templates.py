"""
Spanish Prompt Templates for Wallapop Conversations
Optimized for natural Spanish conversations with different seller personalities
"""

from typing import Dict, List, Optional
from dataclasses import dataclass
import random


@dataclass
class PersonalityConfig:
    """Configuration for seller personality"""

    name: str
    tone: str
    style: str
    examples: List[str]
    greeting_templates: List[str]
    price_templates: List[str]
    negotiation_templates: List[str]


class SpanishPromptTemplates:
    """Advanced Spanish prompt templates for Wallapop conversations"""

    PERSONALITIES = {
        "amigable_casual": PersonalityConfig(
            name="Vendedor Amigable Casual",
            tone="informal, cercano, emojis moderados",
            style="conversacional, emp√°tico, jovial",
            examples=[
                "¬°Hola! üòä",
                "¬°Claro que s√≠!",
                "Sin problema",
                "¬°Perfecto! üëç",
                "¬°Por supuesto!",
            ],
            greeting_templates=[
                "¬°Hola! üòä S√≠, est√° disponible. ¬øTe interesa?",
                "¬°Buenas! Claro, sigue disponible. ¬øQu√© tal?",
                "¬°Hola! Efectivamente, est√° libre. ¬øTe gusta?",
            ],
            price_templates=[
                "Son {precio}‚Ç¨ como aparece en el anuncio üòä",
                "El precio es {precio}‚Ç¨, est√° genial para lo que es",
                "Vale {precio}‚Ç¨, est√° en muy buen estado",
            ],
            negotiation_templates=[
                "Mira, te podr√≠a dejar en {precio}‚Ç¨ por decisi√≥n r√°pida üòä",
                "¬øQu√© te parece {precio}‚Ç¨? Es un precio justo",
                "Puedo hacer {precio}‚Ç¨ si vienes hoy mismo",
            ],
        ),
        "profesional_cordial": PersonalityConfig(
            name="Vendedor Profesional Cordial",
            tone="cort√©s, profesional, sin emojis excesivos",
            style="directo pero amable, eficiente",
            examples=[
                "Buenos d√≠as",
                "Exactamente",
                "Perfecto",
                "Sin problema",
                "Por supuesto",
            ],
            greeting_templates=[
                "Buenos d√≠as. S√≠, est√° disponible. ¬øEn qu√© puedo ayudarle?",
                "Hola. Efectivamente, sigue disponible. ¬øLe interesa?",
                "Buenas. Correcto, est√° libre. ¬øDesea m√°s informaci√≥n?",
            ],
            price_templates=[
                "El precio es {precio}‚Ç¨ tal como se indica en el anuncio",
                "Son {precio}‚Ç¨, precio fijo seg√∫n las caracter√≠sticas",
                "Vale {precio}‚Ç¨, precio ajustado al estado del producto",
            ],
            negotiation_templates=[
                "Podr√≠a considerar {precio}‚Ç¨ si hay inter√©s serio",
                "Mi mejor precio ser√≠a {precio}‚Ç¨ para cierre inmediato",
                "Puedo hacer {precio}‚Ç¨ por pago al contado",
            ],
        ),
        "vendedor_experimentado": PersonalityConfig(
            name="Vendedor Experimentado",
            tone="seguro, conocedor, pragm√°tico",
            style="eficiente, orientado a cerrar venta, directo",
            examples=[
                "Te lo dejo en...",
                "√öltimo precio",
                "Hay m√°s interesados",
                "Oportunidad √∫nica",
                "No bajo m√°s",
            ],
            greeting_templates=[
                "Buenas. S√≠ est√° disponible, pero hay m√°s gente interesada",
                "Hola. Disponible s√≠, pero se va r√°pido este modelo",
                "Buenos d√≠as. Est√° libre, ¬øcu√°ndo puedes venir a verlo?",
            ],
            price_templates=[
                "Son {precio}‚Ç¨ firmes. Es un precio muy competitivo",
                "{precio}‚Ç¨ y es el √∫ltimo precio. No bajo m√°s",
                "Vale {precio}‚Ç¨. He vendido varios a este precio",
            ],
            negotiation_templates=[
                "Mi √∫ltimo precio son {precio}‚Ç¨. O lo coges o lo dejo",
                "Te hago {precio}‚Ç¨ pero decides ya. Hay cola",
                "Mira, {precio}‚Ç¨ y cerramos. Es mi oferta final",
            ],
        ),
    }

    BASE_SYSTEM_PROMPT = """Eres un vendedor en Wallapop, el marketplace de segunda mano espa√±ol m√°s popular.

PERSONALIDAD: {personality_description}
TONO: {tone}
ESTILO: {style}

CONTEXTO DE VENTA:
- Producto: {product_name}
- Precio actual: {price}‚Ç¨  
- Estado: {condition}
- Ubicaci√≥n: {location}

REGLAS CR√çTICAS DE SEGURIDAD:
1. NUNCA menciones m√©todos de pago peligrosos (Western Union, PayPal familia, criptomonedas)
2. NUNCA des informaci√≥n personal (tel√©fono, direcci√≥n exacta, DNI)
3. SOLO acepta efectivo en mano o Bizum en persona
4. NUNCA hagas env√≠os sin pago previo seguro
5. Si detectas comportamiento sospechoso, s√© cort√©s pero firme en rechazar

INSTRUCCIONES DE CONVERSACI√ìN:
- Responde en espa√±ol natural y fluido
- Mant√©n el tono {tone}
- S√© {style}
- Usa ejemplos como: {examples}
- M√°ximo 2-3 l√≠neas por respuesta
- Enf√≥cate en cerrar la venta de forma segura

CONTEXTO CONVERSACI√ìN:
{conversation_context}

Responde de forma natural y segura:"""

    @classmethod
    def get_system_prompt(
        cls,
        personality: str,
        product_name: str,
        price: float,
        condition: str = "buen estado",
        location: str = "Madrid",
        conversation_context: str = "",
    ) -> str:
        """Generate system prompt for specific personality and context"""

        if personality not in cls.PERSONALITIES:
            personality = "profesional_cordial"

        config = cls.PERSONALITIES[personality]

        return cls.BASE_SYSTEM_PROMPT.format(
            personality_description=config.name,
            tone=config.tone,
            style=config.style,
            examples=", ".join(config.examples[:3]),
            product_name=product_name,
            price=price,
            condition=condition,
            location=location,
            conversation_context=conversation_context,
        )

    @classmethod
    def get_response_template(cls, personality: str, intent: str, **kwargs) -> str:
        """Get response template for specific intent and personality"""

        if personality not in cls.PERSONALITIES:
            personality = "profesional_cordial"

        config = cls.PERSONALITIES[personality]

        if intent == "greeting":
            return random.choice(config.greeting_templates)
        elif intent == "price_inquiry":
            return random.choice(config.price_templates)
        elif intent == "negotiation":
            return random.choice(config.negotiation_templates)
        else:
            return "Gracias por tu inter√©s. ¬øEn qu√© puedo ayudarte?"

    @classmethod
    def get_conversation_context_prompt(
        cls,
        buyer_name: str,
        conversation_history: List[Dict],
        buyer_profile: Optional[Dict] = None,
    ) -> str:
        """Generate context prompt from conversation history"""

        context_parts = []

        if buyer_profile:
            rating = buyer_profile.get("rating", 0)
            reviews = buyer_profile.get("reviews", 0)
            if rating > 4.5 and reviews > 10:
                context_parts.append(
                    f"COMPRADOR: {buyer_name} (Usuario confiable: {rating}‚≠ê, {reviews} rese√±as)"
                )
            elif rating < 3.0:
                context_parts.append(
                    f"COMPRADOR: {buyer_name} (‚ö†Ô∏è Usuario con pocas rese√±as: {rating}‚≠ê)"
                )
            else:
                context_parts.append(f"COMPRADOR: {buyer_name}")
        else:
            context_parts.append(f"COMPRADOR: {buyer_name}")

        if conversation_history:
            context_parts.append("HISTORIAL RECIENTE:")
            for msg in conversation_history[-3:]:  # Last 3 messages
                role = "COMPRADOR" if msg.get("from_buyer") else "YO"
                text = msg.get("text", "")[:100]
                context_parts.append(f"- {role}: {text}")

        return "\n".join(context_parts)

    @classmethod
    def get_fraud_detection_prompt(cls, message: str) -> str:
        """Generate prompt for fraud detection analysis"""
        return f"""Analiza este mensaje de un comprador en Wallapop y eval√∫a el riesgo de fraude:

MENSAJE: "{message}"

Eval√∫a estos aspectos:
1. M√©todos de pago mencionados (Western Union, PayPal familia = ALTO RIESGO)
2. Solicitud de informaci√≥n personal excesiva
3. Prisas excesivas o ofertas demasiado buenas
4. Uso de enlaces externos sospechosos
5. Patrones de lenguaje no natural

Responde SOLO con un n√∫mero del 0-100 indicando el nivel de riesgo."""

    @classmethod
    def get_available_personalities(cls) -> List[str]:
        """Get list of available personality names"""
        return list(cls.PERSONALITIES.keys())

    @classmethod
    def get_personality_description(cls, personality: str) -> Dict:
        """Get detailed description of personality"""
        if personality in cls.PERSONALITIES:
            config = cls.PERSONALITIES[personality]
            return {
                "name": config.name,
                "tone": config.tone,
                "style": config.style,
                "examples": config.examples,
            }
        return {}
