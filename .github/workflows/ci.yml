name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  PYTHON_DEFAULT_VERSION: "3.12"

jobs:
  lint-and-format:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-lint-${{ hashFiles('requirements.txt', 'requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-lint-
          ${{ runner.os }}-pip-
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
    
    - name: Install dependencies
      run: uv sync --extra dev
    
    - name: Run Black (Code Formatting)
      run: uv run black --check --diff src/ tests/
    
    - name: Run Flake8 (Linting)
      run: uv run flake8 src/ tests/
    
    - name: Run Bandit (Security Check)
      run: uv run bandit -r src/ -f json -o bandit-report.json || true
    
    - name: Upload Bandit Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-security-report
        path: bandit-report.json
    
    - name: Run MyPy (Type Checking)
      run: uv run mypy src/ --ignore-missing-imports --no-strict-optional
      continue-on-error: true

  test:
    name: Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: wallapop_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt', 'requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
    
    - name: Install Python dependencies
      run: uv sync --extra dev
    
    - name: Install Playwright browsers
      run: |
        uv run playwright install chromium
        uv run playwright install-deps
    
    - name: Install spaCy model
      run: |
        uv run python -c "import spacy; print('spaCy is available')"
        uv run python -m spacy download es_core_news_sm --user
        uv run python -c "import spacy; nlp = spacy.load('es_core_news_sm'); print('Spanish model loaded successfully')"
    
    - name: Set up test environment
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/wallapop_test
        REDIS_URL: redis://localhost:6379/0
        TESTING: true
      run: |
        # Create test database schema if needed
        python -c "
        import os
        import psycopg2
        try:
            conn = psycopg2.connect(
                host='localhost',
                database='wallapop_test', 
                user='test_user',
                password='test_password'
            )
            print('Database connection successful')
            conn.close()
        except Exception as e:
            print(f'Database connection failed: {e}')
            exit(1)
        "
    
    - name: Run unit tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/wallapop_test
        REDIS_URL: redis://localhost:6379/0
        TESTING: true
      run: |
        uv run pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=term-missing -n auto
    
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/wallapop_test
        REDIS_URL: redis://localhost:6379/0
        TESTING: true
      run: |
        uv run pytest tests/integration/ -v --cov=src --cov-append --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == env.PYTHON_DEFAULT_VERSION
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Test Docker build
      run: |
        if [ -f Dockerfile ]; then
          docker build -t wallapop-bot:test .
        else
          echo "No Dockerfile found, skipping Docker build test"
        fi

  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
    
    - name: Install dependencies
      run: uv sync --extra dev
    
    - name: Run safety check on requirements
      run: uv run safety check --json --output safety-report.json || true
    
    - name: Upload Safety Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: safety-vulnerability-report
        path: safety-report.json

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v4
    - uses: actions/dependency-review-action@v3
      with:
        fail-on-severity: moderate