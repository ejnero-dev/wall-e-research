#!/usr/bin/env python3
"""
Script de inicializaci√≥n del proyecto Wallapop Automation Bot
Ejecutar despu√©s de la instalaci√≥n para configurar el entorno
"""

import os
import sys
import json
import subprocess
from pathlib import Path

def print_header(text):
    """Imprime un header formateado"""
    print("\n" + "="*50)
    print(f"  {text}")
    print("="*50 + "\n")

def check_python_version():
    """Verifica la versi√≥n de Python"""
    print("Verificando versi√≥n de Python...")
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 11):
        print(f"‚ùå Python {version.major}.{version.minor} detectado")
        print("   Se requiere Python 3.11 o superior")
        return False
    print(f"‚úÖ Python {version.major}.{version.minor} - OK")
    return True

def create_directories():
    """Crea directorios necesarios"""
    print("\nCreando directorios...")
    directories = [
        "logs",
        "data",
        "data/products",
        "data/conversations", 
        "backups",
        "backups/database",
        "backups/conversations",
        "debug",
        "debug/screenshots",
        "credentials"
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"‚úÖ Creado: {directory}")

def check_dependencies():
    """Verifica dependencias del sistema"""
    print("\nVerificando dependencias del sistema...")
    
    dependencies = {
        "PostgreSQL": "psql --version",
        "Redis": "redis-cli --version",
        "Git": "git --version"
    }
    
    for name, command in dependencies.items():
        try:
            subprocess.run(command.split(), capture_output=True, check=True)
            print(f"‚úÖ {name} - Instalado")
        except:
            print(f"‚ùå {name} - No encontrado")
            print(f"   Instalar con: sudo apt install {name.lower()}")

def create_env_file():
    """Crea archivo .env de ejemplo"""
    print("\nCreando archivo .env...")
    
    env_content = """# Configuraci√≥n de entorno para Wallapop Bot

# Base de datos
DATABASE_URL=postgresql://wallapop_user:password@localhost:5432/wallapop_bot

# Redis
REDIS_URL=redis://localhost:6379/0

# Seguridad
SECRET_KEY=cambiar-esta-clave-secreta-en-produccion

# Wallapop
WALLAPOP_SESSION_COOKIE=

# Desarrollo
DEBUG=True
LOG_LEVEL=INFO

# Timezone
TZ=Europe/Madrid
"""
    
    if not Path(".env").exists():
        with open(".env", "w") as f:
            f.write(env_content)
        print("‚úÖ Archivo .env creado")
        print("   ‚ö†Ô∏è  Recuerda configurar las variables de entorno")
    else:
        print("‚ö†Ô∏è  Archivo .env ya existe")

def create_test_config():
    """Crea configuraci√≥n de prueba"""
    print("\nCreando configuraci√≥n de prueba...")
    
    if not Path("config/config.yaml").exists():
        subprocess.run(["cp", "config/config.example.yaml", "config/config.yaml"])
        print("‚úÖ Configuraci√≥n creada desde ejemplo")
        print("   ‚ö†Ô∏è  Editar config/config.yaml con tus datos")
    else:
        print("‚ö†Ô∏è  Configuraci√≥n ya existe")

def install_spacy_model():
    """Instala modelo de spaCy para espa√±ol"""
    print("\nInstalando modelo de spaCy...")
    try:
        subprocess.run([sys.executable, "-m", "spacy", "download", "es_core_news_sm"], check=True)
        print("‚úÖ Modelo de spaCy instalado")
    except:
        print("‚ùå Error instalando modelo de spaCy")
        print("   Ejecutar manualmente: python -m spacy download es_core_news_sm")

def create_sample_cookies():
    """Crea archivo de cookies de ejemplo"""
    print("\nCreando archivo de cookies de ejemplo...")
    
    sample_cookies = {
        "_wallapop_session": "TU_SESSION_COOKIE_AQUI",
        "user_id": "TU_USER_ID",
        "auth_token": "TU_AUTH_TOKEN"
    }
    
    if not Path("credentials/cookies.json").exists():
        with open("credentials/cookies.json", "w") as f:
            json.dump(sample_cookies, f, indent=2)
        print("‚úÖ Archivo de cookies de ejemplo creado")
        print("   ‚ö†Ô∏è  Actualizar con cookies reales de Wallapop")
    else:
        print("‚ö†Ô∏è  Archivo de cookies ya existe")

def check_playwright():
    """Verifica instalaci√≥n de Playwright"""
    print("\nVerificando Playwright...")
    try:
        import playwright
        print("‚úÖ Playwright instalado")
        
        # Instalar navegadores si no est√°n
        subprocess.run(["playwright", "install", "chromium"], check=True)
        print("‚úÖ Navegador Chromium instalado")
    except:
        print("‚ùå Playwright no instalado correctamente")
        print("   Ejecutar: pip install playwright && playwright install chromium")

def main():
    """Funci√≥n principal"""
    print_header("INICIALIZACI√ìN DEL PROYECTO WALLAPOP BOT")
    
    # Verificaciones
    if not check_python_version():
        sys.exit(1)
    
    # Crear estructura
    create_directories()
    
    # Verificar dependencias
    check_dependencies()
    
    # Crear archivos de configuraci√≥n
    create_env_file()
    create_test_config()
    create_sample_cookies()
    
    # Instalar componentes
    install_spacy_model()
    check_playwright()
    
    print_header("INICIALIZACI√ìN COMPLETADA")
    print("Pr√≥ximos pasos:")
    print("1. Configurar PostgreSQL y crear base de datos")
    print("2. Editar config/config.yaml con tu configuraci√≥n")
    print("3. Obtener cookies de Wallapop y actualizar credentials/cookies.json")
    print("4. Ejecutar: python src/bot/wallapop_bot.py")
    print("\n¬°Buena suerte! üöÄ")

if __name__ == "__main__":
    main()
