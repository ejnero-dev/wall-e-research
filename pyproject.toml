[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "wallapop-automation-bot"
description = "Automated bot for managing Wallapop sales conversations"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Project Team", email = "team@example.com"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dynamic = ["version"]
dependencies = [
    "cryptography>=45.0.7",
]

[tool.setuptools_scm]
write_to = "src/_version.py"

[tool.black]
# Black code formatter configuration
line-length = 88
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    # Directories
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.pytest_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | alembic/versions
)/
'''

[tool.isort]
# isort import sorting configuration
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = [
    "*/.venv/*",
    "*/venv/*",
    "*/__pycache__/*",
    "*/alembic/versions/*"
]
known_first_party = ["src"]
known_third_party = [
    "fastapi",
    "sqlalchemy",
    "pytest",
    "pydantic",
    "redis",
    "celery",
    "playwright",
    "spacy"
]

[tool.mypy]
# MyPy type checking configuration
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
ignore_missing_imports = true
strict_optional = false

# Per-module options
[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "alembic.*"
ignore_errors = true

[tool.bandit]
# Bandit security linter configuration
exclude_dirs = ["tests", "alembic/versions"]
skips = [
    "B101",  # assert_used - OK in tests
    "B601",  # paramiko_calls - We might use paramiko
    "B602",  # subprocess_popen_with_shell_equals_true
]

[tool.bandit.assert_used]
skips = ["**/test_*.py", "**/tests.py", "**/conftest.py"]

[tool.pytest.ini_options]
# Pytest configuration (complements pytest.ini)
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--tb=short",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "slow: Slow running tests",
    "scraper: Web scraping tests",
    "database: Database dependent tests",
]

[tool.coverage.run]
# Coverage.py configuration
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/alembic/versions/*",
    "*/venv/*",
    "*/.venv/*",
]
branch = true

[tool.coverage.report]
# Coverage reporting
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"
